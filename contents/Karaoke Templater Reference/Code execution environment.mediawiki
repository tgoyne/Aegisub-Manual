{{Todo|Make something better of this pasta from the dev wiki}}

As noted above, template code is run with a different environment (global namespace) than the regular Lua global namespace. This is done to avoid polluting the global namespace of the kara-templater script itself with user variables and similar, and to avoid inadvertent modifications that could make kara-templater break.

The "mother namespace" kara-templater itself is running in is still available, though, so it can be accessed if needed.

The following fields exist in the template execution environment (''tenv'') by default:

* '''_G''' - Reference to the "mother environment" of kara-templater itself.
* '''tenv''' - Self-reference to the ''tenv'', ie. ''tenv.tenv == tenv''.
* '''math''' - The Lua math library.
* '''string''' - The Lua string library.
* '''meta''' - Subtitle file meta information (script resolution mainly)
* '''orgline''' - Original line, the one templates are running for right now, it's a bad idea to modify this.
* '''line''' - For templates, the new line being generated; this can freely be modified during templates. For code lines, this is the original line and should not be modified.
* '''syl''' - The syllable templates are running for right now, this can be a pseudo-syllable if the ''multi'' or ''char'' modifiers are used.
* '''basesyl''' - The base syllable templates are running for. This is always the actual syllable independent of ''multi'' and ''char'' modifiers being used, ie. for non-''multi'' non-''char'' templates, ''basesyl == syl''.
* '''j''' - The loop counter for templates with the ''loop'' modifier, runs from 1 to ''numloops''.
* '''maxj''' - The number of loops the current template is running, ie. the value ''j'' will have during the last iteration.
* '''retime''' - The ''retime'' function, see below.
* '''fxgroup''' - The ''fxgroup'' table used to enable/disable fxgroups from being used. See below.

Not all of the variables are set at all times. ''line'', ''syl'' and ''basesyl'' are reset to ''nil'' each time processing starts for a new source line. Everything else is left alone after creation when the templates are first initialised.

This means that you can freely create new variables and functions inside the ''tenv'' and expect them to stay there.

==== The ''retime'' function ====
[[Image:Auto4-kara-templater-retime-diagram.png|right]]

Synopsis: '''retime(mode, addstart, addend)'''

Changes the timing of the line being generated by the current template. ''mode'' specifies what the new line timing should be relative to. ''addstart'' and ''addend'' are used to adjust the starting and ending times of the new line further. If ''addstart'' and ''addend'' are left out, they default to zero.

''mode'' is a string, it can take one of the following values:
* '''abs''' or '''set''' - Use ''addstart'' and ''addend'' as absolute time values from the beginning of the time line, simply setting a new start and end time for the line.
* '''preline''' - Intended to make effects that happen before the actual line start. The base start and end times are both set to the line start time and then adjusted by ''addstart'' and ''addend''. Usually you will want to use a negative ''addstart'' and a zero ''addend''.
* '''line''' - The entire line, ie. this just adjusts the start and end time by the given amounts.
* '''start2syl''' - The time from the start of line to the start of syllable.
* '''presyl''' - Similar to ''preline'' but for the syllable timing instead.
* '''syl''' - From start of syllable to end of syllable.
* '''postsyl''' - Similar to ''presyl'' but the base timing is the syllable end time instead of start time. You will usually want to use a zero ''addstart'' and positive ''addend'' here.
* '''syl2end''' - The time from the end of the syllable to the end of line.
* '''postline''' - Similar to ''postsyl'' but for the line timing instead.

There is also one special value for ''mode'':
* '''sylpct''' - Use ''addstart'' and ''addend'' as percentage values of the syllable duration, and add those to the syllable start time to get the new line start and end time.

See also [https://www.spaceboyz.net/svn/aegisub/trunk/automation/tests/kara-templater-retime.ass this test-file] for examples on how to use ''retime''.

You should never use ''retime'' on ''line'' templates, but you can safely use it on ''pre-line'' templates. Also, using anything but ''set''/''abs'', ''preline'' and ''postline'' modes for ''pre-line'' templates will not work. Since a set of ''pre-line'' and ''line'' templates affect the same generated line it's only needed to change the timing once, and using ''retime'' on a ''line'' template will in fact result in the line timing being changed once for each syllable on the line.

''retime'' changes the ''line.start_time'', ''line.end_time'' and ''line.duration'' fields. These changes are visible to code blocks appearing later in the same template, but never to dollar-variables in the same template.

Using ''retime'' multiple times in one template has undefined behaviour. (So don't do that.)

==== The ''fxgroup'' table ====
This table can be used to enable/disable the use of templates declared to be in specific fxgroups.

The ''fxgroup'' table is indexed by the names of fxgroups defined. If no entry is defined for an fxgroup (or it's set to ''nil'') the fxgroup is considered enabled. An fxgroup is only considered disabled when ''fxgroup.groupname == false''.

Example:

 Comment: 0,0:00:10.00,0:00:15.00,Default,,0000,0000,0000,code syl,fxgroup.long = syl.duration > 200
 Comment: 0,0:00:05.00,0:00:10.00,Default,,0000,0000,0000,template syl noblank,all here: 
 Comment: 0,0:00:15.00,0:00:20.00,Default,,0000,0000,0000,template syl fxgroup long,is long: 
 Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,,{\k10}huh? {\k40}wee~~

It's important to understand the template execution order to understand this example. For each input syllable (ie. "huh?" and "wee~~") all the templates and code lines are run in the order they appear.

This means that for "huh?", first the code line is run. It determines that the duration of that syllable is less than 200 ms and thus sets ''fxgroup.long'' to false. The first template has no fxgroup, so it's applied to the syllable then, outputting a line "all here: huh?", but the second template has fxgroup "long". This fxgroup was disabled for that syllable by the code line, so that template is not run at all.

For "wee~~", the code line determines that its duration is longer than 200 ms, so the "long" fxgroup is enabled. Then the first template outputs its line, "all here: wee~~", and when the second template is to run, its fxgroup is enabled now so it's also run, outputting "is long: wee~~".

Neither of the two templates will output anything for the zero'th syllable. The first template, because it has the "noblank" modifier, and the second because the zero'th syllable's duration is too short for the fxgroup to be enabled.