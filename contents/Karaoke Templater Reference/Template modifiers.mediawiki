Template lines and code lines can take a number of modifiers.

This is a space-separated list of words in the Effect field following the <code>template</code> or <code>code</code> keyword.

While modifiers can be combined to some extent, not all are compatible, and not all work on both code lines and for templates.

There is a special set of modifiers that declare the class of the template line or code line.

== Class declaring modifiers ==

Both template lines and code lines can be produced without having a class modifier. Having one is still recommended for clarity, however.

A template line without a class modifier is implicitly given the <code>syl</code> modifier.

A code line without a class modifier is implicitly given the <code>once</code> modifier.

=== once ===

This class modifier is only valid for code lines.

Code lines with the <code>once</code> modifier are run exactly once during Karaoke Templater execution, and are always run before any other code lines or templates. They are run in the order they are declared.

"code once" lines are primarily intended to declare functions for use in templates.

==== Example ====
 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,<b>code once</b>,function setlayer(newlayer) line.layer = newlayer; return ""; end

This example declares a new function that changes the Layer field in the output line.

=== line ''[name]'' ===

This class modifier is valid for both code lines and template lines.

When used on template lines it takes an optional parameter naming the line template the template line participates in. The template name must not match any template modifier names.

Anonymous line templates (with no template name given) can not have pre-line template text.

Named line template lines append to the template text in the order they appear. The appending of template text happens at template parse time, not at execution time.

==== Examples ====

 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,<b>code line</b>,fxgroup.funky = line.actor == "funky"

This code line is run once per input line. It enables/disables an effect group named "funky" depending on the Actor field of the input line.

 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,<b>template line</b>,{\r\t($start,$end,\bord0)}

This template line declares an anonymous line template. The effect produced will transform the border of each syllable to zero during the syllable's duration.

 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,<b>template line jumper</b>,{\r\t($start,$mid,\frz-0.1)\t($mid,$end,\frz0}

This template line appends to a line template named "jumper"  or creates it if it doesn't exist. Together with the pre-line template example given below, this will produce a "jumping" effect for the syllables.

=== pre-line ''[name]'' ===

This class modifier is only valid for template lines.

The <code>pre-line</code> modifier takes an optional parameter naming the line template the template line participates in. The template name must not match any template modifier names.

Anonymous line templates with only pre-line text leave the original input line text alone and just prepends the template text to the line.

Named pre-line template lines append to the pre-line template text in the order they appear. The appending of template text happens at template parse time, not at execution time.

==== Examples ====

 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,<b>template pre-line</b>,{\be1}

This template line declares an anonymous line template, that will prepend <tt>{\be1}</tt> to all matching lines.

 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,<b>template pre-line jumper</b>,{\org(-10000,$y)}

This template line appends to the pre-line template text of a line template named "jumper", or creates it if it doesn't exist. Together with the line template example given above, this will produce a "jumping" effect for the syllables.

=== syl ===

This class modifier is valid for both code lines and template lines.

Syl templates can not be named.

==== Example ====

 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,template syl,{\pos($x,$y)}

This template line declares a syl template that simply positions the syllable text.

=== furi ===

This class modifier is valid for both code lines and template lines.

Furi templates can not be named.

==== Example ====

 Comment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,template syl,{\pos($x,$y)}

This template line declares a furi template that simply positions the syllable text. It's not needed to do anything further to get correct furigana formatting.

=== syl furi ===

It's possible to combine the <code>syl</code> and <code>furi</code> class modifiers. This results in two identical templates being generated from the template line, one syl template and one furi template.

This is the only possible combination of class modifiers, they are otherwise exclusive.

== Other modifiers ==

=== all ===

Apply template to all styles, not just the one of the template line.

Applicable for both code lines and templates, and for all classes.

{{todo|example}}

=== char ===

Make the template work per-character instead of per-syllable. This changes application order semantics in a significant way, see [[Karaoke Templater Reference: Template execution rules and order|Template execution and order]] for details.

While this will work on code lines, it is generally not useful, see the discussion on execution order.

{{todo|example}}

=== fx ''name'' ===

Make template only apply to syllables that have the named [[inline-fx]]. Specifying an inline-fx name is required; the name may also overlap with template modifier names though this is not recommended.

{{todo|example}}

=== fxgroup ''name'' ===

Declare template to be in the named effect group. Specifying an effect group name is required; the name may also overlap with template modifier names and Lua reserved words, though this is not recommended.

{{todo|example}}

=== keeptags ===

Specify that the original tags must be kept in the syllable after application.

This has no effect when combined with <code>char</code> or <code>multi</code>.

{{todo|example}}

=== multi ===

Make the template apply per-highlight in [[Furigana karaoke|multi-highlight]] timed karaoke. This changes application order semantics in a significant way, see [[Karaoke Templater Reference: Template execution rules and order|Template execution and order]] for details.

While this will work on code lines, it is generally not useful, see the discussion on execution order.

{{todo|example}}

=== notext ===

Specify that the original text will not be appended to the output line.

This is intended for use primarily with templates that output drawing tags and similar.

Not applicable for code lines.

{{todo|example}}

=== noblank ===

Specify that the template will not be applied to syllables considered "blank". A syllable is considered blank if its tag-stripped text consists only of a combination of ASCII whitespace characters and ideographic fullwidth space characters, or is completely empty. A syllable is also considered empty if its duration is zero.

{{todo|example}}

=== repeat ''n'', loop ''n'' ===

Specify that the template will be applied the given number of times. Specifying the number of loops is required. The number of loops must be a constant integer number, it can not be a variable or otherwise calculated dynamically.

Note that the execution order of looped line templates and looped syl/furi templates is different. See [[Karaoke Templater Reference: Template execution rules and order|Template execution and order]] for details.

{{todo|example}}