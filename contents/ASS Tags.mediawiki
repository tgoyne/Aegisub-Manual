__NOTOC__
The following is a list of every tag supported by the Advanced Substation Alpha format. This is basically a detailed version of ass-quickref.txt. See the [[Typesetting Tutorial|tutorial]] for an introduction to typesetting, using some basic tags.

==Special characters==
The following tags are written in the middle of the text, and not inside override blocks (i.e. not between { and }).

{{TagDefBox|name=Soft line break
|usage=\n|desc=
Insert a forced line break, but only when in wrapping mode 2. (See [[#Wrap style|the \q tag]].) Note that this is a lowercase n.

In all other wrapping modes, this is replaced by a regular space.}}

{{TagDefBox|name=Hard line break
|usage=\N|desc=
Insert a forced line break, regardless of wrapping mode. Note that this is an uppercase N.}}

{{TagDefBox|name=Hard space
|usage=\h|desc=
Insert a non-breaking "hard" space. The line will never break automatically right before or after a hard space, and hard spaces are not folded when they appear at the start or end of a displayed line.}}

==Override tags==
These tags must be in an override block, that is, they must be between a { and a }, and will affect all text following the block, unless they get re-overridden.

{{TagDefBox|name=Italics
|usage=\i1<br>\i0|desc=
Switch ''italics'' text on or off. Use <code>\i1</code> to enable italics for the following text and <code>\i0</code> to disable italics again.}}

{{TagDefBox|name=Bold
|usage=\b1<br>\b0<br>\b<i><weight></i>|desc=
Switch '''boldface''' text on or off. Use <code>\b1</code> to enable boldface for the following text and <code>\b0</code> to disable boldface again.

The <code>\b<i><weight></i></code> form allows you to specify an explicit weight to use. Note that most fonts only support one or two weights so you rarely need to use this. Font weights are multiples of 100, such that 100 is the lowest, 400 is "normal", 700 is "bold" and 900 is the heaviest.}}

{{TagDefBox|name=Underline
|usage=\u1<br>\u0|desc=
Switch <u>underlined</u> text on or off. Use <code>\u1</code> to enable underlining for the following text and <code>\u0</code> to disable underlining again.}}

{{TagDefBox|name=Strikeout
|usage=\s1<br>\s0|desc=
Switch <s>striked out</s> text on or off. Use <code>\s1</code> to enable strikeout for the following text and <code>\s0</code> to disable strikeout again.}}

{{TagDefBox|name=Border size
|usage=\bord<i><size></i>|desc=
Change the width of the border around the text. Set the size to 0 (zero) to disable the border entirely.

If "scale border and shadow" (see [[Properties|script properties]]) is enabled, the value is given in script resolution pixels, otherwise it is given in video resolution pixels (which means the border thickness will vary depending on the resolution of the video on which the subtitles are rendered.)

The value is not limited to whole integer pixels, it can have decimal places.

{{Examplebox|<pre>\bord0</pre>
Disable border entirely.}}
{{Examplebox|<pre>bord3.7</pre>
Set the border width to 3.7 pixels}}
}}

{{TagDefBox|name=Border size (extended)
|usage=\xbord<i><size></i><br>\ybord<i><size></i>|desc=
:''These tags are only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

Use the <code>\xbord</code> <code>\ybord</code> tags to set the border size in X and Y direction separately. This can be useful for correcting the border size for anamorphic rendering of subtitles.

Note that if you use <code>\bord</code> after <code>\xbord</code> or <code>\ybord</code> on a line, it will override both of them.

You can set the border width to 0 (zero) in one of the directions to entirely disable border in that direction.}}

{{TagDefBox|name=Shadow distance
|usage=\shad<i><depth></i>|desc=
Set the distance from the text to position the shadow. Set the depth to 0 (zero) to disable shadow entirely. Works similar to [[#Border size|\bord]].

The shadow distance can not be negative with this tag.}}

{{TagDefBox|name=Shadow distance (extended)
|usage=\xshad<i><depth></i><br>\yshad<i><depth></i>|desc=
:''These tags are only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

Set the distance from the text to position the shadow at, with X and Y position set separately. Shadow is only disabled if both X and Y distance is 0.

Note that you can set the distance negative with these tags to position the shadow to the top or left of the text.}}

{{TagDefBox|name=Blur edges
|usage=\be0<br>\be1<br>\be<i><strength></i>|desc=
:''The <code>\be<i><strength></i></code> version is only available in VSFilter 2.39 and later and might not be safe for softsubbing.''

Enable or disable a subtle softening-effect for the edges of the text. The effect isn't always very visible, but it can in some cases make the text look better. It is usually more visible at smaller text sizes.

Be aware that this tag blurs the ''edges'' of the text, not everything. This means that if the text has a border (set with [[#Border width|\bord]]) the border will be blurred, but if there is no border, the main text will be blurred instead.

In the extended version, ''strength'' is the number of times to apply the regular effect. Note that at high values the effect de-generates into nothingness, and generally isn't very useful. The ''strength'' must be an integer number.}}

{{TagDefBox|name=Blur edges (gaussian kernel)
|usage=\blur<i><strength></i>|desc=
:''This tag is only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

In general, this has the same function as the [[#Blur edges|\be]] tag, but uses a more advanced algorithm that looks better at high strengths. Unlike <code>\be</code>, the ''strength'' can be non-integer here. Set ''strength'' to 0 (zero) to disable the effect. Be careful, setting ''strength'' too high can take a lot of CPU time to render.

Be aware that this tag blurs the ''edges'' of the text, not everything. This means that if the text has a border (set with [[#Border width|\bord]]) the border will be blurred, but if there is no border, the main text will be blurred instead.}}

{{TagDefBox|name=Font name
|usage=\fn<i><name></i>|desc=
Set the font face to use for the following text. There should be no space between <code>\fn</code> and the font name, and you should not put parentheses or similar around the font name either.

{{Examplebox|<pre>\fnArial</pre>
The text following this tag will be in Arial font.}}
{{Examplebox|<pre>\fnTimes New Roman</pre>
The text following this tag will be in Times New Roman font.}}
}}

{{TagDefBox|name=Font size
|usage=\fs<i><size></i>|desc=
Set the size of the font. The size specified is the height in script pixels, so at font size 40 one line of text is 40 pixels tall.

You can only specify integer font sizes.

{{Examplebox|<pre>\fs10</pre>
The following text will use a size 10 font.}}
}}

{{TagDefBox|name=Font scale
|usage=\fscx<i><scale></i><br>\fscy<i><scale></i>|desc=
Adjust the size of the text in X (<code>\fscx</code> or Y (<code>\fscy</code>) direction. The ''scale'' given is in percent, so 100 means "original size".

This is not the same as setting the font size, as setting the size is subject to [http://en.wikipedia.org/wiki/Font_hinting font hinting] while scaling the text modifies the text shape after hinting.

These tags also affect [[#Vector drawings|vector drawings]].

You can use font scaling to correct for anamorphic rendering and to specify text size more precisely than with [[#Font size|\fs]].

{{Examplebox|<pre>\fscx150</pre>
Make the text 50% wider than normal.}}
{{Examplebox|<pre>\fscy50</pre>
Make the text half height.}}
{{Examplebox|<pre>\fscx200\fscy200</pre>
Make the text double size.}}
}}

{{TagDefBox|name=Letter spacing
|usage=\fsp<i><spacing></i>|desc=
Changes the spacing between the individual letters in the text. You can use this to spread the text more out visually. The ''spacing'' is given in script resolution pixels.}}

{{TagDefBox|name=Text rotation
|usage=\frx<i><amount></i><br>\fry<i><amount></i><br>\frz<i><amount></i><br>\fr<i><amount></i>|desc=
Rotates the text along the X, Y or Z axis. The <code>\fr</code> tag is a shortcut for <code>\frz</code>.

* The '''X axis''' runs horizontally on the screen. Rotating on it (with positive values) causes an effect where the top of the text moves farther "into" the screen while the bottom moves "out" of the screen.
* The '''Y axis''' runs vertically on the screen. Rotating on it (with positive values) causes the text to rotate so that the left moves "outside" the screen, when the right moves "into" the screen.
* The '''Z'''axis runs perpendicular to the screen. Rotating on it (with positive values) causes the text to rotate in 2D, counterclockwise (as standard for degrees).

The rotation ''amount'' is given in mathematical degrees, such that 360 degrees is a full rotation, and rotating any multiple of 360 is the same as not rotating. It is legal to specify negative rotation amounts, as well as amounts larger than 360 degrees.

The rotation is performed around the subtitle line origin point, this is described with the [[#Rotation origin|\org]] tag.

These tags also affect [[#Vector drawings|vector drawings]].

{{Examplebox|<pre>\frx45</pre>
Rotate the text 45 degrees on the X axis.}}
{{Examplebox|<pre>\fry-45</pre>
Rotate the text 45 degrees in opposite direction on the Y axis.}}
{{Examplebox|<pre>\frz180</pre>
Rotate the text 180 degrees on the Z axis, making it upside-down.}}
{{Examplebox|The following two rotations produce the same result:
<pre>\frz-30
\frz330</pre>
This is because 330 degrees is 30 degrees less than a full rotation of 360 degrees.}}
{{Examplebox|<pre>\t(\frz3600)</pre>
Perform an animation where the text performs 10 full revolutions on the Z axis. Also see the [[#Animated transform|\t]] tag.}}
{{Examplebox|The following screenshots illustrate the effect of rotating on the different axes:<br>
[[Image:fr_sample01.jpg]]<br>[[Image:fr_sample02.jpg]]<br>[[Image:fr_sample03.jpg]]}}
}}

{{TagDefBox|name=Text shearing
|usage=\fax<i><factor></i><br>\fay<i><factor></i>|desc=
:''These tags are only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

Perform a shearing (perspective distortion) transformation of the text. A ''factor'' of 0 (zero) means no distortion.

Usually ''factor'' will be a small number, not larger than 2 as that creates a very strong distortion.

Shearing is performed after rotation, on the rotated coordinates. The coordinate system used for shearing is not affected by the [[#Rotation origin|rotation origin]].

{{todo|We need a screenshot illustrating the effect.}}
}}

{{TagDefBox|name=Font encoding
|usage=\fe<i><id></i>|desc=
Set the Windows font encoding used to select the font mapping table used to translate Unicode codepoints to glyph indices in the font. For some fonts without a Unicode mapping table this might be required to get text in certain languages to work. For fonts that do have a Unicode mapping table, it might be used to pick regional variations, such as picking the correct glyph for a Han ideogram that is different in Simplified Chinese, Traditional Chinese, Japanese and Korean.

Some common font encoding ID's are:

* 0 - ANSI, Windows CP-1252 for Western-European languages.
* 1 - Default, depends on the configuration of the user's system, but also allows the font sub-system to dynamically pick a different mapping table in some circumstances.
{{todo|Is that really correct?}}
* 2 - Symbol, codepoints in the 0-255 range are translated to per-font defined symbol glyphs, this is used for fonts such as Wingdings.
* 128 - Shift-JIS, used for Japanese.
* 129 and 130, respectively Hangeul and Johab, two encoding schemes for Korean.
* 134 - GB2312, used for Simplified Chinese.
* 136 - BIG5, used for Traditional Chinese.
* 162 - Turkish.
* 163 - Vietnamese.
* 177 - Hebrew.
* 178 - Arabic.

A more complete list can be seen the [[Styles#The style editor|style editor]] dialog box.

In ASS files stored in non-Unicode encodings, this tag also affects what codepage the text following it should be interpreted in. Aegisub doesn't support this use and some renderers might not support it either, it is recommended you do not rely on this and instead always store your files in a Unicode encoding. (Aegisub stores files in Unicode UTF-8 by default.}}

{{TagDefBox|name=Set color
|usage=\c&H<i><bb><gg><rr></i>&<br>\1c&H<i><bb><gg><rr></i>&<br>\2c&H<i><bb><gg><rr></i>&<br>\3c&H<i><bb><gg><rr></i>&<br>\4c&H<i><bb><gg><rr></i>&|desc=
Set the color of the following text. The <code>\c</code> tag is an abbreviation of <code>\1c</code>.

* <code>\1c</code> sets the primary fill color.
* <code>\2c</code> sets the secondary fill color, this is only used for pre-highlight in standard karaoke.
* <code>\3c</code> sets the border color.
* <code>\4c</code> sets the shadow color.

The color codes are given in [http://en.wikipedia.org/wiki/Hexadecimal hexadecimal] in Blue Green Red order. Note that this is the opposite order of eg. HTML color codes. Color codes must always start with <code>&H</code> and end with <code>&</code>.

The Pick Color toolbar buttons [[Image:pick-color-toolbar-buttons.png]] can assist in picking colors and entering the color codes.
}}

{{TagDefBox|name=Set alpha
|usage=\alpha&H<i><aa></i><br>\1a&H<i><aa></i><br>\2a&H<i><aa></i><br>\3a&H<i><aa></i><br>\4a&H<i><aa></i>|desc=
Set the alpha (transparency) of the text.

* <code>\alpha</code> sets the alpha of all components at once.
* <code>\1a</code> sets the primary fill alpha.
* <code>\2a</code> sets the secondary fill alpha, this is only used for pre-highlight in standard karaoke.
* <code>\3a</code> sets the border alpha.
* <code>\4a</code> sets the shadow alpha.

An alpha of 00 (zero) means opaque/fully visible, and an alpha of FF (ie. 255 in decimal) is fully transparent/invisible.

{{Examplebox|<pre>\alpha&H80&</pre>
Set the alpha of all components to hexadecimal 80, decimal 128, making the text 50% transparent in general.}}
{{Examplebox|<pre>\1a&HFF&</pre>
Set the primary fill alpha to hexadecimal FF, decimal 255, making it invisible and effectively leaving only the border and shadow.}}
}}

{{TagDefBox|name=Line alignment
|usage=\an<i><pos></i>|desc=
Specify the alignment of the line. The alignment specifies the position of the line when no [[#Set position|position override]] or [[#Movement|movement]] is in effect, and otherwise specifies the anchor point of positioning.

The <code>\an</code> tag uses "numpad" values for the ''pos'', ie. the alignment values correspond to the positions of the digits on the numeric keypad on a regular keyboard:

* 1: Bottom left
* 2: Bottom center
* 3: Bottom right
* 4: Middle left
* 5: Middle center
* 6: Middle right
* 7: Top left
* 8: Top center
* 9: Top right
}}

{{TagDefBox|name=Line alignment (legacy)
|usage=\a<i><pos></i>|desc=
Specify the alignment of the line using legacy alignment codes from SubStation Alpha.

Calculate ''pos'' as follows: Use 1 for left-alignment, 2 for center alignment and 3 for right-alignment. If you want sub-titles you're done. To get top-titles, add 4 to the number, to get mid-titles add 8 to the number:

* 1: Bottom left
* 2: Bottom center
* 3: Bottom right
* 5: Top left
* 6: Top center
* 7: Top right
* 9: Middle left
* 10: Middle center
* 11: Middle right
}}

{{TagDefBox|name=Karaoke effect
|usage=\k<i><duration></i><br>\K<i><duration></i><br>\kf<i><duration></i><br>\ko<i><duration></i>|desc=
:''Please note that these tags alone only create some very specific effects and all other effects are created with a combination of multiple different tags.''

The <code>\k</code> family of tags mark up subtitles for karaoke effects by specifying the duration of each syllable. You place a <code>\k</code> tag before each syllable in the line.

The ''duration'' is given in centiseconds, ie. a ''duration'' of 100 is equivalent to 1 second. You generally don't enter <code>\k</code> tags manually but rather use karaoke timing tools such as [[Tutorials#Karaoke Timing|Aegisub's karaoke mode]].

The different <code>\k</code> tags create various effects:

* <code>\k</code>: Before highlight, the syllable is filled with the secondary color and alpha. When the syllable starts, the fill is instantly changed to use primary color and alpha.
* <code>\K</code> and <code>\kf</code>: These two are identical. Note that <code>\K</code> is an uppercase K and is different from lowercase <code>\k</code>. The syllable fill starts out secondary color, when the syllable starts, the fill changes from secondary to primary with a sweep from left to right, so the sweep ends when the syllable time is over.
* <code>\ko</code>: Similar to <code>\k</code>, except that before highlight, the border/outline of the syllable is removed, and appears instantly when the syllable starts.

''Note: There is an additional karaoke tag, <code>\kt</code>, which is very different from the other ones. Aegisub does not support that tag and so it is not documented.''
}}

{{TagDefBox|name=Wrap style
|usage=\q<i><style></i>|desc=
Determine how line breaking is applied to the subtitle line. The following ''style''s are available:

* 0: Smart wrapping, make each line approximately equally long, but top line wider when equal width is impossible. Only <code>\N</code> forces line breaks.
* 1: End-of-line wrapping, fill as much text in a line as possible, then break to next line. Only <code>\N</code> forces line breaks.
* 2: No word wrapping, wide lines will extend beyound the edges of the screen. Both <code>\n</code> and <code>\N</code> force line breaks.
* 3: Smart wrapping, similar to style 0, but bottom lines are made wider.
}}

{{TagDefBox|name=Reset style
|usage=\r<br>\r<i><style></i>|desc=
Reset the style. This cancels all style overrides in effect, including [[#Animated transform|animations]], for all following text.

The first form that does not specify a ''style'' will reset to the style defined for the entire line, while the second form, that specifies the name of a ''style'', will reset the style to that specific style.

{{Examplebox|<pre>-Hey\N{\rAlternate}-Huh?\N{\r}-Who are you?</pre>
Assuming the current line style is "Default", this has first "Hey" in the Default style, then follows on next line "Huh?" in the style "Alternate", and on the third line the style is reset to "Default" for the "Who are you?" text.}}
}}

{{TagDefBox|name=Set position
|usage=\pos(<i><X></i>,<i><Y></i>)|desc=
Set the position of the line. The ''X'' and ''Y'' coordinates must be integers and are given in the script resolution coordinate system. The meaning of ''X'' and ''Y'' changes slightly depending on [[#Line alignment|alignment]].

:''In VSFilter 2.39 and later, you can use non-integer numbers for coordinates. Note that this might not be safe for softsubbing.''

The alignment of the subtitle line is used as anchor point for the position, eg. when you have a line with alignment top-left, the top-left corner of the subtitle is placed at the coordinates given to <code>\pos</code>, and for bottom-center alignment, the bottom center of the subtitle is placed at the coordinates given.

{{Examplebox|The following screenshots illustrate the way alignment affects positioning. The green cross marks the point (320,240) on the video.<br>
[[Image:pos_sample01.jpg]]<br>[[Image:pos_sample02.jpg]]<br>[[Image:pos_sample03.jpg]]}}
}}

{{TagDefBox|name=Movement
|usage=\move(<i><x1></i>,<i><y1></i>,<i><x2></i>,<i><y2></i>)<br>\move(<i><x1></i>,<i><y1></i>,<i><x2></i>,<i><y2></i>,<i><t1></i>,<i><t2></i>)|desc=
The <code>\move</code> tag works similar to [[#Set position|<code>\pos</code>]] in that it positions the subtitle line, the difference is that <code>\move</code> makes the subtitle move.

The two versions of <code>\move</code> differ in that one makes the movement occur over the entire duration of the subtitle, while on the other you specify the time over which the movement occurs.

The coordinates ''x1'', ''y1'', ''x2'' and ''y2'' are given in the script resolution coordinate system, like <code>\pos</code>. The subtitle starts out at point (''x1'',''y1'') and moves with constant speed so it ends up at (''x2'',''y2''). [[#Line alignment|Alignment]] influences movement coordinates the same way as it influences <code>\pos</code> coordinates.

:''In VSFilter 2.39 and later, you can use non-integer numbers for the X and Y coordinates. Note that this might not be safe for softsubbing.''

In the second version, the times ''t1'' and ''t2'' are given in milliseconds, ie. one thousandth of a second, and are relative to the start time of the subtitle. For example, a ''t1'' value of 1500 means that the movement begins 1.5 seconds (one and a half second) after the line has appeared on screen. When you specify times for the movement, the position of the subtitle is as follows:

# Before ''t1'', the subtitle is stationary at point (''x1'',''y1'').
# Between ''t1'' and ''t2'', the subtitle moves with constant speed from (''x1'',''y1'') to (''x2'',''y2'').
# After ''t2'' the subtitle is stationary at point (''x2'',''y2'').

Note that it is legal to have ''t1'' and ''t2'' specify times greater than the duration of the line, but it might not be very useful to do so. Specifying both ''t1'' and ''t2'' as 0 (zero) is the same as using the first version of <code>\move</code>, ie. the movement will occur from the start time of the line to the end time of the line.

There are some things '''<code>\move</code> can not do''':
* Non-constant-speed movement is not possible. The movement can not, for example, start out slow and end fast.
* There can only be one positioning or movement tag in a line. Putting both a <code>\pos</code> and a <code>\move</code> tag in a line will not work. It will also not work to put two or more <code>\move</code> tags in a single line.
If you need to do do any of those two you will need to split the movement into segments that are done on separate subtitle lines. (How to do this is outside the scope of this page.)

{{Examplebox|<pre>\move(100,150,300,350)</pre>
When the line appears on screen, the subtitle is at (100,150). While the subtitle is displayed, it moves at constant speed such that it will arrive at point (300,350) at the same time it disappears.}}
{{Examplebox|<pre>\move(100,150,300,350,500,1500)</pre>
The line appears at (100,150). After the line has been displayed for half a second (500 milliseconds) it begins moving towards (300,350) such that it will arrive at the point a second and a half (1500 milliseconds) after the line first appeared on screen.}}
}}

{{TagDefBox|name=Rotation origin
|usage=\org(<i><X></i>,<i><Y></i>)|desc=
Set the origin point used for [[#Text rotation|rotation]]. This affects all rotations of the line. The ''X'' and ''Y'' coordinates are given in integer script resolution pixels.

When there is no <code>\org</code> tag in a line, the rotation origin is implicitly the same as the [[#Set position|position anchor point]]. This means that the rotation origin will move if the line moves and there is no origin set with <code>\org</code>. Note that you can ''not'' animate the <code>\org</code> tag, you are limited to a fixed origin if you use it.

If the rotation origin is placed on the vanishing point in a 3D scene, 3D rotations of subtitle line will produce the correct perspective to match the scene.

There can be at most one <code>\org</code> tag in a single line, if you put more than one in a single line, only the first is used.

{{Examplebox|<pre>\org(320,240)</pre>
Fix the rotation origin at point (320,240).}}
{{Examplebox|<pre>\org(10000,0)</pre>
Placing the rotation origin at a far away point allows you to use slight <code>\frz</code> rotations to produce "jumping" effects; the text will move up or down without seeming to rotate.}}
}}

{{TagDefBox|name=Fade
|usage=\fad(<i><fadein></i>,<i><fadeout></i>)|desc=
Produce a fade-in and fade-out effect. The ''fadein'' and ''fadeout'' times are given in milliseconds, ie. 1000 means one second. You can specify ''fadein'' or ''fadeout'' as 0 (zero) to not have any fade effect on that end.

Adding a fade effect does not extend the duration of the line, rather the start or end of the line's display time is used for the fade effect. For this reason, you should be careful that ''fadein''+''fadeout'' is not greater than the duration of the line. For example, for a line displayed for 4 seconds, the sum of ''fadein''+''fadeout'' should not be greater than 4000.

{{Examplebox|<pre>\fad(1200,250)</pre>
Fade in the line in the first 1.2 seconds it is to be displayed, and fade it out for the last one quarter second it is displayed.}}
}}

{{TagDefBox|name=Fade (complex)
|usage=\fade(<i><a1></i>,<i><a2></i>,<i><a3></i>,<i><t1></i>,<i><t2></i>,<i><t3></i>,<i><t4></i>)|desc=
Perform a five-part fade using three alpha values ''a1'', ''a2'' and ''a3'' and four times ''t1'', ''t2'', ''t3'' and ''t4''.

The alpha values are given in ''decimal'' and are between 0 and 255, with 0 being fully visible and 255 being invisible. The time values are given in milliseconds after the start of the line. All seven parameters are required. (For most common fade effects the <code>[[#Fade|\fad]]</code> tag works fine.)

* Before ''t1'', the line has alpha ''a1''.
* Between ''t1'' and ''t2'' the line fades from alpha ''a1'' to alpha ''a2''.
* Between ''t2'' and ''t3'' the line has alpha ''a2'' constantly.
* Between ''t3'' and ''t4'' the line fades from alpha ''a2'' to alpha ''a3''.
* After ''t4'' the line has alpha ''a3''.

{{Examplebox|<pre>\fade(255,32,224,0,500,2000,2200)</pre>
Starts invisible, fades to almost totally opaque, then fades to almost totally invisible. First fade starts when the line starts and lasts 500 milliseconds. Second fade starts 1500 milliseconds later, and lasts 200 milliseconds.}}
}}

===\t([<t1>,<t2>,][<accel>,]<style modifiers>) - Transform===
This is perhaps the most powerful override tag available. It does nothing by itself; instead, it animates (transforms) other tags. The animation will start at t1 milliseconds and end at t2 milliseconds, in much the same way as [[#\move(<x1>,<y1>,<x2>,<y2>%5b,<t1>,<t2>%5d) - Move|\move]]. If either of those parameters are omitted or zero, then start and end of the line respectively are assumed, as with \move.

The optional acceleration parameter allows the transformation to be non-linear. Think of it as the exponent on a x^n. Acceleration = 1 is linear. Acceleration between 0 and 1 starts fast and ends slow. Acceleration larger than 1 starts slower and ends fast.

The following tags are supported by \t:
*\c
*\1-4c
*\alpha
*\1-4a
*\fs
*\fr
*\frx
*\fry
*\frz
*\fscx
*\fscy
*\fsp
*\bord
*\shad
*\clip (rectangle version only).
In VSFilter '''2.39 or later''' the following tags are also supported by \t, in addition to the ones listed above:
*\be
*\blur
*\fax
*\fay
*\xbord
*\ybord
*\xshad
*\yshad
*\iclip (rectangle version only)

e.g.:
 {\c&H0000FF&\t(\c&HFF0000)}Hello!
(Starts text at a red colour and fades it to blue)
 {\an5\t(0,5000,\frz3600)}Woo!
(Makes the text rotate 10 times, counterclockwise, lasting for 5 seconds)
 {\an5\t(0,5000,0.5,\frz3600)}Woo!
(Same as before, but it will start fast and slow down, still doing the 10 rotations in 5 seconds)
 {\an5\fscx0\fscy0\t(0,500,\fscx100\fscy100)}
(Text starts at zero size, ie. invisible, then grows to 100% size in both X and Y direction.)

===\[i]clip(<x1>,<y1>,<x2>,<y2>) - Set clipping rectangle===
This sets the clipping rectangle of the text, so that it will ''only'' be drawn ''inside'' this rectangle. For example, if you had a resolution of 640x480 and set \clip(0,0,320,240), then text would only be drawn on top-left quadrant - anything outside it would be "clipped" and would be invisible. This tag is useful for when some object moves in front of text: you can use [[#\t(%5b<t1>,<t2>,%5d%5b<accel>,%5d<style modifiers>) - Transform|\t]] to animate the "window" where the text is visible.
e.g.:
 \clip(0,0,320,240)
(Areas of text will only be drawn if they are on top-left quadrant)
 \clip(100,300,540,480)
(Areas of text will only be drawn if they are on center-bottom)

Sample screenshot (with \clip(0,0,704,245) on a 704x480 video):

[[Image:clip_sample01.jpg]]

In VSFilter '''2.39 or later''' the variation \iclip is also available. It works the same way as the regular \clip() tag, except that the region you specify is hidden and everything else is shown; it's the opposite effect of \clip().

'''Note:''' If you use \iclip() anywhere in a line, all \clip tags in that line will also be treated as \iclip() tags, even if a \clip() tag comes before the first iclip() tag.

===\[i]clip([<scale>,]<drawings>) - Set clipping vector===
Same as before, but it uses drawing vectors instead of a rectangle. See the drawing section below for more information. Note that, unlike the previous tag, this may ''not'' be animated with [[#\t(%5b<t1>,<t2>,%5d%5b<accel>,%5d<style modifiers>) - Transform|\t]]. The optional scale argument is equivalent to the value passed to [[#\p<0/1/..> - Toggle drawing mode|\p]] on the drawing tag. On an unrelated note, this tag makes me wonder if Gabest was actively trying to prevent other people from writing ASS parsers by creating an overloaded tag.
e.g.:
 \clip(1,m 50 0 b 100 0 100 100 50 100 b 0 100 0 0 50 0)
(Limits clip to pseudo-circle defined)

In VSFilter '''2.39 or later''' the variation \iclip is also available. It works the same way as the regular \clip() tag, except that the region you specify is hidden and everything else is shown; it's the opposite effect of \clip().

'''Note:''' If you use \iclip() anywhere in a line, all \clip tags in that line will also be treated as \iclip() tags, even if a \clip() tag comes before the first iclip() tag.

'''Note:''' VSFilter 2.37 has known bugs with vector clipping. It is suggested you upgrade to 2.39 or later.

==Drawing tags==
Advanced Substation Alpha also supports some advanced drawing tags that allow you to draw with vectorial graphics. Certain familiarity with vectors and splines will make the understanding of this much simpler.

===\p<0/1/..> - Toggle drawing mode===
Setting this tag to 1 or above enables drawing mode. Text after this override block will then be interpreted as drawing instructions, and not as actually visible text. Setting this to zero disables drawing mode, restoring normal behavior. When turning on, the value might be any integer larger than zero, and will be interpreted as the scale, in 2^(value-1) mode. This is done to allow sub-pixel accuracy.
e.g.:
 \p1
(Enables drawing with normal coordinates)
 \p0
(Disables drawing)
 \p2
(Enables drawing, and resolution is doubled. So drawing to 200,200 will actually draw to 100,100)
 \p4
(Enables drawing, and resolution is 8x larger (2^(4-1)). So drawing to 400,400 will actually draw to 50,50)

===\pbo<y> - Baseline offset===
Defines baseline offset for drawing. This is basically an Y offset to all coordinates.
e.g.:
 \pbo-50
(Draws everything 50 pixels above specified)
 \pbo100
(Draws everything 100 pixels below specified)

==Drawing commands==
These commands should appear either in a \clip tag (vectorial overload) or between \p# and \p0, outside override blocks.
For example (taken straight from the ASS specs):
*Square:
 {\p1}m 0 0 l 100 0 100 100 0 100{\p0}
*Rounded square:
 {\p1}m 0 0 s 100 0 100 100 0 100 c{\p0}
:(c equals to "p 0 0 100 0 100 100" in this case)
*Circle (almost):
 {\p1}m 50 0 b 100 0 100 100 50 100 b 0 100 0 0 50 0{\p0}
:(note that the 2nd 'b' is optional here)

Drawing commands use the primary color for fill and outline color for borders. They also display shadow. The idea of drawing vectors is that there is an invisible "cursor" (think of it as the mouse pointer in a drawing program, or as a pen moving through the image) on the video frame, and you tell it to move to other positions. As it moves, it draws on the area behind it, and when you close the line formed, it fills it with the primary color.

===m <x> <y> - Move===
Moves the cursor to x,y. If you have an unclosed shape, it will automatically be closed, as the program assumes that you are now drawing a new, independent shape. All drawing routines must start with this command.

===n <x> <y> - Move (no closing)===
Moves the cursor to x,y, without closing the current shape.

===l <x> <y> - Line===
Draws a line from the current cursor position to x,y, and moves the cursor there afterwards.

===b <x1> <y1> <x2> <y2> <x3> <y3> - Cubic Bézier curve===
Draws a cubic (3rd degree) Bézier curve to point 3, using 1 and 2 as the control points. Check the [http://en.wikipedia.org/wiki/B%C3%A9zier_curve article on Wikipedia] for more information about Bézier curves. In this picture taken from that article, P0 is the cursor position, P1 is x1,y1, P2 is x2,y2 and P3 is x3,y3:<br>
[[Image:Bezier.png]]<br>
Note that the curve begins at P0, heads towards P1, then arrives at P3 coming from P2's direction.

===s <x1> <y1> <x2> <y2> <x3> <y3> .. <xN> <yN> - Cubic b-spline===
Draws a cubic (3rd degree) uniform b-spline to point N. This must contain at least 3 coordinates (and is, in that case, the same as b). This basically lets you chain several cubic Bézier curves together. Check this other article on Wikipedia for more information.

===p <x> <y> - Extend b-spline===
Extends the b-spline to x,y. This is essentially the same as adding another pair of coordinates at the end of s.

===c - Close b-spline===
Closes the b-spline.