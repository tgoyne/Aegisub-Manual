__NOTOC__
The following is a list of every tag supported by the Advanced Substation Alpha format. This is basically a detailed version of ass-quickref.txt. See the [[Typesetting Tutorial|tutorial]] for an introduction to typesetting, using some basic tags.

==Special characters==
The following tags are written in the middle of the text, and not inside override blocks (i.e. not between { and }).

{{TagDefBox|name=Soft line break
|usage=\n|desc=
Insert a forced line break, but only when in wrapping mode 2. (See [[#Wrap style|the \q tag]].) Note that this is a lowercase n.

In all other wrapping modes, this is replaced by a regular space.}}

{{TagDefBox|name=Hard line break
|usage=\N|desc=
Insert a forced line break, regardless of wrapping mode. Note that this is an uppercase N.}}

{{TagDefBox|name=Hard space
|usage=\h|desc=
Insert a non-breaking "hard" space. The line will never break automatically right before or after a hard space, and hard spaces are not folded when they appear at the start or end of a displayed line.}}

==Override tags==
These tags must be in an override block, that is, they must be between a { and a }, and will affect all text following the block, unless they get re-overridden.

{{TagDefBox|name=Italics
|usage=\i1<br>\i0|desc=
Switch ''italics'' text on or off. Use <code>\i1</code> to enable italics for the following text and <code>\i0</code> to disable italics again.}}

{{TagDefBox|name=Bold
|usage=\b1<br>\b0<br>\b<i><weight></i>|desc=
Switch '''boldface''' text on or off. Use <code>\b1</code> to enable boldface for the following text and <code>\b0</code> to disable boldface again.

The <code>\b<i><weight></i></code> form allows you to specify an explicit weight to use. Note that most fonts only support one or two weights so you rarely need to use this. Font weights are multiples of 100, such that 100 is the lowest, 400 is "normal", 700 is "bold" and 900 is the heaviest.}}

{{TagDefBox|name=Underline
|usage=\u1<br>\u0|desc=
Switch <u>underlined</u> text on or off. Use <code>\u1</code> to enable underlining for the following text and <code>\u0</code> to disable underlining again.}}

{{TagDefBox|name=Strikeout
|usage=\s1<br>\s0|desc=
Switch <s>striked out</s> text on or off. Use <code>\s1</code> to enable strikeout for the following text and <code>\s0</code> to disable strikeout again.}}

{{TagDefBox|name=Border size
|usage=\bord<i><size></i>|desc=
Change the width of the border around the text. Set the size to 0 (zero) to disable the border entirely.

If "scale border and shadow" (see [[Properties|script properties]]) is enabled, the value is given in script resolution pixels, otherwise it is given in video resolution pixels (which means the border thickness will vary depending on the resolution of the video on which the subtitles are rendered.)

The value is not limited to whole integer pixels, it can have decimal places.

{{Examplebox|<pre>\bord0</pre>
Disable border entirely.}}
{{Examplebox|<pre>bord3.7</pre>
Set the border width to 3.7 pixels}}
}}

{{TagDefBox|name=Border size (extended)
|usage=\xbord<i><size></i><br>\ybord<i><size></i>|desc=
:''These tags are only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

Use the <code>\xbord</code> <code>\ybord</code> tags to set the border size in X and Y direction separately. This can be useful for correcting the border size for anamorphic rendering of subtitles.

Note that if you use <code>\bord</code> after <code>\xbord</code> or <code>\ybord</code> on a line, it will override both of them.

You can set the border width to 0 (zero) in one of the directions to entirely disable border in that direction.}}

{{TagDefBox|name=Shadow distance
|usage=\shad<i><depth></i>|desc=
Set the distance from the text to position the shadow. Set the depth to 0 (zero) to disable shadow entirely. Works similar to [[#Border size|\bord]].

The shadow distance can not be negative with this tag.}}

{{TagDefBox|name=Shadow distance (extended)
|usage=\xshad<i><depth></i><br>\yshad<i><depth></i>|desc=
:''These tags are only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

Set the distance from the text to position the shadow at, with X and Y position set separately. Shadow is only disabled if both X and Y distance is 0.

Note that you can set the distance negative with these tags to position the shadow to the top or left of the text.}}

{{TagDefBox|name=Blur edges
|usage=\be0<br>\be1<br>\be<i><strength></i>|desc=
:''The <code>\be<i><strength></i></code> version is only available in VSFilter 2.39 and later and might not be safe for softsubbing.''

Enable or disable a subtle softening-effect for the edges of the text. The effect isn't always very visible, but it can in some cases make the text look better. It is usually more visible at smaller text sizes.

Be aware that this tag blurs the ''edges'' of the text, not everything. This means that if the text has a border (set with [[#Border width|\bord]]) the border will be blurred, but if there is no border, the main text will be blurred instead.

In the extended version, ''strength'' is the number of times to apply the regular effect. Note that at high values the effect de-generates into nothingness, and generally isn't very useful. The ''strength'' must be an integer number.}}

{{TagDefBox|name=Blur edges (gaussian kernel)
|usage=\blur<i><strength></i>|desc=
:''This tag is only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

In general, this has the same function as the [[#Blur edges|\be]] tag, but uses a more advanced algorithm that looks better at high strengths. Unlike <code>\be</code>, the ''strength'' can be non-integer here. Set ''strength'' to 0 (zero) to disable the effect. Be careful, setting ''strength'' too high can take a lot of CPU time to render.

Be aware that this tag blurs the ''edges'' of the text, not everything. This means that if the text has a border (set with [[#Border width|\bord]]) the border will be blurred, but if there is no border, the main text will be blurred instead.}}

{{TagDefBox|name=Font name
|usage=\fn<i><name></i>|desc=
Set the font face to use for the following text. There should be no space between <code>\fn</code> and the font name, and you should not put parentheses or similar around the font name either.

{{Examplebox|<pre>\fnArial</pre>
The text following this tag will be in Arial font.}}
{{Examplebox|<pre>\fnTimes New Roman</pre>
The text following this tag will be in Times New Roman font.}}
}}

{{TagDefBox|name=Font size
|usage=\fs<i><size></i>|desc=
Set the size of the font. The size specified is the height in script pixels, so at font size 40 one line of text is 40 pixels tall.

You can only specify integer font sizes.

{{Examplebox|<pre>\fs10</pre>
The following text will use a size 10 font.}}
}}

{{TagDefBox|name=Font scale
|usage=\fscx<i><scale></i><br>\fscy<i><scale></i>|desc=
Adjust the size of the text in X (<code>\fscx</code> or Y (<code>\fscy</code>) direction. The ''scale'' given is in percent, so 100 means "original size".

This is not the same as setting the font size, as setting the size is subject to [http://en.wikipedia.org/wiki/Font_hinting font hinting] while scaling the text modifies the text shape after hinting.

These tags also affect [[#Vector drawings|vector drawings]].

You can use font scaling to correct for anamorphic rendering and to specify text size more precisely than with [[#Font size|\fs]].

{{Examplebox|<pre>\fscx150</pre>
Make the text 50% wider than normal.}}
{{Examplebox|<pre>\fscy50</pre>
Make the text half height.}}
{{Examplebox|<pre>\fscx200\fscy200</pre>
Make the text double size.}}
}}

{{TagDefBox|name=Letter spacing
|usage=\fsp<i><spacing></i>|desc=
Changes the spacing between the individual letters in the text. You can use this to spread the text more out visually. The ''spacing'' is given in script resolution pixels.}}

{{TagDefBox|name=Text rotation
|usage=\frx<i><amount></i><br>\fry<i><amount></i><br>\frz<i><amount></i><br>\fr<i><amount></i>|desc=
Rotates the text along the X, Y or Z axis. The <code>\fr</code> tag is a shortcut for <code>\frz</code>.

* The '''X axis''' runs horizontally on the screen. Rotating on it (with positive values) causes an effect where the top of the text moves farther "into" the screen while the bottom moves "out" of the screen.
* The '''Y axis''' runs vertically on the screen. Rotating on it (with positive values) causes the text to rotate so that the left moves "outside" the screen, when the right moves "into" the screen.
* The '''Z'''axis runs perpendicular to the screen. Rotating on it (with positive values) causes the text to rotate in 2D, counterclockwise (as standard for degrees).

The rotation ''amount'' is given in mathematical degrees, such that 360 degrees is a full rotation, and rotating any multiple of 360 is the same as not rotating. It is legal to specify negative rotation amounts, as well as amounts larger than 360 degrees.

The rotation is performed around the subtitle line origin point, this is described with the [[#Rotation origin|\org]] tag.

These tags also affect [[#Vector drawings|vector drawings]].

{{Examplebox|<pre>\frx45</pre>
Rotate the text 45 degrees on the X axis.}}
{{Examplebox|<pre>\fry-45</pre>
Rotate the text 45 degrees in opposite direction on the Y axis.}}
{{Examplebox|<pre>\frz180</pre>
Rotate the text 180 degrees on the Z axis, making it upside-down.}}
{{Examplebox|The following two rotations produce the same result:
<pre>\frz-30
\frz330</pre>
This is because 330 degrees is 30 degrees less than a full rotation of 360 degrees.}}
{{Examplebox|<pre>\t(\frz3600)</pre>
Perform an animation where the text performs 10 full revolutions on the Z axis. Also see the [[#Animated transform|\t]] tag.}}
{{Examplebox|The following screenshots illustrate the effect of rotating on the different axes:<br>
[[Image:fr_sample01.jpg]]<br>[[Image:fr_sample02.jpg]]<br>[[Image:fr_sample03.jpg]]}}
}}

{{TagDefBox|name=Text shearing
|usage=\fax<i><factor></i><br>\fay<i><factor></i>|desc=
:''These tags are only available in VSFilter 2.39 and later, and might not be safe for softsubbing.''

Perform a shearing (perspective distortion) transformation of the text. A ''factor'' of 0 (zero) means no distortion.

Usually ''factor'' will be a small number, not larger than 2 as that creates a very strong distortion.

Shearing is performed after rotation, on the rotated coordinates. The coordinate system used for shearing is not affected by the [[#Rotation origin|rotation origin]].

{{todo|We need a screenshot illustrating the effect.}}
}}

{{TagDefBox|name=Font encoding
|usage=\fe<i><id></i>|desc=
Set the Windows font encoding used to select the font mapping table used to translate Unicode codepoints to glyph indices in the font. For some fonts without a Unicode mapping table this might be required to get text in certain languages to work. For fonts that do have a Unicode mapping table, it might be used to pick regional variations, such as picking the correct glyph for a Han ideogram that is different in Simplified Chinese, Traditional Chinese, Japanese and Korean.

Some common font encoding ID's are:

* 0 - ANSI, Windows CP-1252 for Western-European languages.
* 1 - Default, depends on the configuration of the user's system, but also allows the font sub-system to dynamically pick a different mapping table in some circumstances.
{{todo|Is that really correct?}}
* 2 - Symbol, codepoints in the 0-255 range are translated to per-font defined symbol glyphs, this is used for fonts such as Wingdings.
* 128 - Shift-JIS, used for Japanese.
* 129 and 130, respectively Hangeul and Johab, two encoding schemes for Korean.
* 134 - GB2312, used for Simplified Chinese.
* 136 - BIG5, used for Traditional Chinese.
* 162 - Turkish.
* 163 - Vietnamese.
* 177 - Hebrew.
* 178 - Arabic.

A more complete list can be seen the [[Styles#The style editor|style editor]] dialog box.

In ASS files stored in non-Unicode encodings, this tag also affects what codepage the text following it should be interpreted in. Aegisub doesn't support this use and some renderers might not support it either, it is recommended you do not rely on this and instead always store your files in a Unicode encoding. (Aegisub stores files in Unicode UTF-8 by default.}}

{{TagDefBox|name=Set color
|usage=\c&H<i><bb><gg><rr></i>&<br>\1c&H<i><bb><gg><rr></i>&<br>\2c&H<i><bb><gg><rr></i>&<br>\3c&H<i><bb><gg><rr></i>&<br>\4c&H<i><bb><gg><rr></i>&|desc=
Set the color of the following text. The <code>\c</code> tag is an abbreviation of <code>\1c</code>.

* <code>\1c</code> sets the primary fill color.
* <code>\2c</code> sets the secondary fill color, this is only used for pre-highlight in standard karaoke.
* <code>\3c</code> sets the border color.
* <code>\4c</code> sets the shadow color.

The color codes are given in [http://en.wikipedia.org/wiki/Hexadecimal hexadecimal] in Blue Green Red order. Note that this is the opposite order of eg. HTML color codes. Color codes must always start with <code>&H</code> and end with <code>&</code>.

The Pick Color toolbar buttons [[Image:pick-color-toolbar-buttons.png]] can assist in picking colors and entering the color codes.
}}

{{TagDefBox|name=Set alpha
|usage=\alpha&H<i><aa></i><br>\1a&H<i><aa></i><br>\2a&H<i><aa></i><br>\3a&H<i><aa></i><br>\4a&H<i><aa></i>|desc=
Set the alpha (transparency) of the text.

* <code>\alpha</code> sets the alpha of all components at once.
* <code>\1a</code> sets the primary fill alpha.
* <code>\2a</code> sets the secondary fill alpha, this is only used for pre-highlight in standard karaoke.
* <code>\3a</code> sets the border alpha.
* <code>\4a</code> sets the shadow alpha.

An alpha of 00 (zero) means opaque/fully visible, and an alpha of FF (ie. 255 in decimal) is fully transparent/invisible.

{{Examplebox|<pre>\alpha&H80&</pre>
Set the alpha of all components to hexadecimal 80, decimal 128, making the text 50% transparent in general.}}
{{Examplebox|<pre>\1a&HFF&</pre>
Set the primary fill alpha to hexadecimal FF, decimal 255, making it invisible and effectively leaving only the border and shadow.}}
}}

{{TagDefBox|name=Line alignment
|usage=\an<i><pos></i>|desc=
Specify the alignment of the line. The alignment specifies the position of the line when no [[#Set position|position override]] or [[#Movement|movement]] is in effect, and otherwise specifies the anchor point of positioning.

The <code>\an</code> tag uses "numpad" values for the ''pos'', ie. the alignment values correspond to the positions of the digits on the numeric keypad on a regular keyboard:

* 1: Bottom left
* 2: Bottom center
* 3: Bottom right
* 4: Middle left
* 5: Middle center
* 6: Middle right
* 7: Top left
* 8: Top center
* 9: Top right
}}

{{TagDefBox|name=Line alignment (legacy)
|usage=\a<i><pos></i>|desc=
Specify the alignment of the line using legacy alignment codes from SubStation Alpha.

Calculate ''pos'' as follows: Use 1 for left-alignment, 2 for center alignment and 3 for right-alignment. If you want sub-titles you're done. To get top-titles, add 4 to the number, to get mid-titles add 8 to the number:

* 1: Bottom left
* 2: Bottom center
* 3: Bottom right
* 5: Top left
* 6: Top center
* 7: Top right
* 9: Middle left
* 10: Middle center
* 11: Middle right
}}

{{TagDefBox|name=Karaoke effect
|usage=\k<i><duration></i><br>\K<i><duration></i><br>\kf<i><duration></i><br>\ko<i><duration></i>|desc=
:''Please note that these tags alone only create some very specific effects and all other effects are created with a combination of multiple different tags.''

The <code>\k</code> family of tags mark up subtitles for karaoke effects by specifying the duration of each syllable. You place a <code>\k</code> tag before each syllable in the line.

The ''duration'' is given in centiseconds, ie. a ''duration'' of 100 is equivalent to 1 second. You generally don't enter <code>\k</code> tags manually but rather use karaoke timing tools such as [[Tutorials#Karaoke Timing|Aegisub's karaoke mode]].

The different <code>\k</code> tags create various effects:

* <code>\k</code>: Before highlight, the syllable is filled with the secondary color and alpha. When the syllable starts, the fill is instantly changed to use primary color and alpha.
* <code>\K</code> and <code>\kf</code>: These two are identical. Note that <code>\K</code> is an uppercase K and is different from lowercase <code>\k</code>. The syllable fill starts out secondary color, when the syllable starts, the fill changes from secondary to primary with a sweep from left to right, so the sweep ends when the syllable time is over.
* <code>\ko</code>: Similar to <code>\k</code>, except that before highlight, the border/outline of the syllable is removed, and appears instantly when the syllable starts.

''Note: There is an additional karaoke tag, <code>\kt</code>, which is very different from the other ones. Aegisub does not support that tag and so it is not documented.''
}}

===\q<0-3> - Wrap style===
Sets the line wrapping style as follows:
*'''0:''' Smart wrapping, top line is wider
*'''1:''' End-of-line word wrapping, only \N breaks
*'''2:''' No word wrapping, both \n and \N break
*'''3:''' Smart wrapping, bottom line is wider
e.g.:
 \q1
(Following text will only acknowledge \N as line breaks; \n will become a simple space)

===\r[<name>] - Reset style===
This resets the style to the specified one. If none is given, it resets to this line's original style.
e.g.:
 -Hey\N{\rAlternate}-Huh?\N{\r}-Who are you?
(this has the middle line in the style "Alternate", while first and third are in the originally set style)

===\pos(<x>,<y>) - Position===
Positions the subtitle at the specified coordinates. Coordinates start at 0,0 for the top-left corner and go to ResX,ResY at the bottom-right corner, where ResX and ResY are defined in the script header (you can set this value in the properties window). Coordinates do not necessarily match video coordinates: if the script resolution is set to 640x480, then doing a \pos(320,240) on a center-aligned text will ''always'' put it on the center of video, even if it is, for example, 704x396.

In VSFilter '''2.39 or later''' \pos allows floating point coordinates for positioning with subpixel precision.

You may only have one \pos command in each line. If you have more, only the first one has any effect.

Note that \pos is affected the pivot of subtitles. For example, if the current line has centered alignment (\an5), then the center of line will be placed at that position; if it's top-left (\an7), then the top-left corner of line will be placed at that position, etc.
e.g.:
 \pos(100,200)
(Positions the line at video position x=100 and y=200)

Here follow three examples of \pos(320,240) on a 640x480 resolution script. The only difference between them is the alignment, note how the pivot (represented by a green crosshair) is always at 320,240.

[[Image:pos_sample01.jpg]]<br>
[[Image:pos_sample02.jpg]]<br>
[[Image:pos_sample03.jpg]]

===\move(<x1>,<y1>,<x2>,<y2>[,<t1>,<t2>]) - Move===
Moves the text from the original position, defined by x1,y1, to the destination, defined by x2,y2. This means that at the very start of animation, the subtitles will look the same as if you had done a [[#\pos(<x>,<y>) - Position|\pos]](x1,y1), and, at the very end, the same as \pos(x2,y2). If the parameters t1 and t2 are specified, then the subs will start at x1,y1, but won't start moving to x2,y2 until time reaches t1. At that point, they will start moving, and end at t2. t1 and t2 are specified in milliseconds, relative to the start time of current line. If t1 and t2 are omitted or zero, animation is assumed to last for the whole length of line.

You may only have one \move command in each line. If you have more, only the first one has any effect.
e.g.:
 \move(100,150,300,350)
(Moves from 100,150 to 300,350, lasting whole line duration)
 \move(100,150,300,350,500,1500)
(Same as before, but it starts 500 ms (that is, half a second) after line appears, and ends one second later (that is, 1.5 seconds after subtitles started))

===\org(<x>,<y>) - Origin===
Sets the screen coordinates of the origin (or pivot point) for rotation and scaling tags. This can be useful for some relatively advanced effects. Suppose that you have a spinning roulette in the video, and you want some text to follow it. You can set the origin to the center position of roulette, and then animate a [[#\fr%5b<x/y/z>%5d<degrees> - Font rotation|\frz]] with \t, so the text spins around that position. Origin can also be set outside video, which means that you can set it very far away, and make minor adjustments to rotation to give text a "jumping" effect.

You may only have one \org command in each line. If you have more, only the first one has any effect.
e.g.:
 \org(320,240)
(Sets origin at 320,240)
 \org(10000,0)
(Sets origin at 10000,0, which might be useful for jumping effects)

===\fade(<a1>,<a2>,<a3>,<t1>,<t2>,<t3>,<t4>) - Fade===
Fades text. This is done in two steps. The text starts with alpha a1 (as if set by \alpha), and at time t1, it will start fading to a2. It ends fading to a2 at time t2. At time t3, it starts fading to value a3, and finally ends on time t4. Times are given in milliseconds relative to start of line, in the same way as \move. Note that the transparency values are given as decimal numbers (0-255), '''not''' hexadecimal (&00&-&FF&) as with \alpha! 0 is opaque, 255 is transparent. Note that this tag affects all four alphas.
e.g.:
 \fade(255,32,224,0,500,2000,2200)
(Starts invisible, fades to almost totally opaque, then fades to almost totally invisible. First fade starts when the line starts and lasts 500 milliseconds. Second fade starts 1500 milliseconds later, and lasts 200 milliseconds)

===\fad(<t1>,<t2>) - Fade (simplified)===
A less powerful, but more practical version of [[#\fade(<a1>,<a2>,<a3>,<t1>,<t2>,<t3>,<t4>) - Fade|\fade]]. It makes line start invisible, then immediately start fading to full visibility for t1 milliseconds. It will start fading to invisible t2 milliseconds before the END of line, and become invisible just as the line vanishes. It's important to notice that this is the only ASS override tag that has a time reference relative to end of line. It is also equivalent to \fade(255,0,255,0,t1,LEN-t2,LEN), where LEN is the length of current line in milliseconds. 
e.g.:
 \fad(500,500)
(Fades text in for 500 milliseconds, then fades out for 500 milliseconds at the end)
 \fad(500,0)
(Fades text in for 500 milliseconds [does not fade out])

===\t([<t1>,<t2>,][<accel>,]<style modifiers>) - Transform===
This is perhaps the most powerful override tag available. It does nothing by itself; instead, it animates (transforms) other tags. The animation will start at t1 milliseconds and end at t2 milliseconds, in much the same way as [[#\move(<x1>,<y1>,<x2>,<y2>%5b,<t1>,<t2>%5d) - Move|\move]]. If either of those parameters are omitted or zero, then start and end of the line respectively are assumed, as with \move.

The optional acceleration parameter allows the transformation to be non-linear. Think of it as the exponent on a x^n. Acceleration = 1 is linear. Acceleration between 0 and 1 starts fast and ends slow. Acceleration larger than 1 starts slower and ends fast.

The following tags are supported by \t:
*\c
*\1-4c
*\alpha
*\1-4a
*\fs
*\fr
*\frx
*\fry
*\frz
*\fscx
*\fscy
*\fsp
*\bord
*\shad
*\clip (rectangle version only).
In VSFilter '''2.39 or later''' the following tags are also supported by \t, in addition to the ones listed above:
*\be
*\blur
*\fax
*\fay
*\xbord
*\ybord
*\xshad
*\yshad
*\iclip (rectangle version only)

e.g.:
 {\c&H0000FF&\t(\c&HFF0000)}Hello!
(Starts text at a red colour and fades it to blue)
 {\an5\t(0,5000,\frz3600)}Woo!
(Makes the text rotate 10 times, counterclockwise, lasting for 5 seconds)
 {\an5\t(0,5000,0.5,\frz3600)}Woo!
(Same as before, but it will start fast and slow down, still doing the 10 rotations in 5 seconds)
 {\an5\fscx0\fscy0\t(0,500,\fscx100\fscy100)}
(Text starts at zero size, ie. invisible, then grows to 100% size in both X and Y direction.)

===\[i]clip(<x1>,<y1>,<x2>,<y2>) - Set clipping rectangle===
This sets the clipping rectangle of the text, so that it will ''only'' be drawn ''inside'' this rectangle. For example, if you had a resolution of 640x480 and set \clip(0,0,320,240), then text would only be drawn on top-left quadrant - anything outside it would be "clipped" and would be invisible. This tag is useful for when some object moves in front of text: you can use [[#\t(%5b<t1>,<t2>,%5d%5b<accel>,%5d<style modifiers>) - Transform|\t]] to animate the "window" where the text is visible.
e.g.:
 \clip(0,0,320,240)
(Areas of text will only be drawn if they are on top-left quadrant)
 \clip(100,300,540,480)
(Areas of text will only be drawn if they are on center-bottom)

Sample screenshot (with \clip(0,0,704,245) on a 704x480 video):

[[Image:clip_sample01.jpg]]

In VSFilter '''2.39 or later''' the variation \iclip is also available. It works the same way as the regular \clip() tag, except that the region you specify is hidden and everything else is shown; it's the opposite effect of \clip().

'''Note:''' If you use \iclip() anywhere in a line, all \clip tags in that line will also be treated as \iclip() tags, even if a \clip() tag comes before the first iclip() tag.

===\[i]clip([<scale>,]<drawings>) - Set clipping vector===
Same as before, but it uses drawing vectors instead of a rectangle. See the drawing section below for more information. Note that, unlike the previous tag, this may ''not'' be animated with [[#\t(%5b<t1>,<t2>,%5d%5b<accel>,%5d<style modifiers>) - Transform|\t]]. The optional scale argument is equivalent to the value passed to [[#\p<0/1/..> - Toggle drawing mode|\p]] on the drawing tag. On an unrelated note, this tag makes me wonder if Gabest was actively trying to prevent other people from writing ASS parsers by creating an overloaded tag.
e.g.:
 \clip(1,m 50 0 b 100 0 100 100 50 100 b 0 100 0 0 50 0)
(Limits clip to pseudo-circle defined)

In VSFilter '''2.39 or later''' the variation \iclip is also available. It works the same way as the regular \clip() tag, except that the region you specify is hidden and everything else is shown; it's the opposite effect of \clip().

'''Note:''' If you use \iclip() anywhere in a line, all \clip tags in that line will also be treated as \iclip() tags, even if a \clip() tag comes before the first iclip() tag.

'''Note:''' VSFilter 2.37 has known bugs with vector clipping. It is suggested you upgrade to 2.39 or later.

==Drawing tags==
Advanced Substation Alpha also supports some advanced drawing tags that allow you to draw with vectorial graphics. Certain familiarity with vectors and splines will make the understanding of this much simpler.

===\p<0/1/..> - Toggle drawing mode===
Setting this tag to 1 or above enables drawing mode. Text after this override block will then be interpreted as drawing instructions, and not as actually visible text. Setting this to zero disables drawing mode, restoring normal behavior. When turning on, the value might be any integer larger than zero, and will be interpreted as the scale, in 2^(value-1) mode. This is done to allow sub-pixel accuracy.
e.g.:
 \p1
(Enables drawing with normal coordinates)
 \p0
(Disables drawing)
 \p2
(Enables drawing, and resolution is doubled. So drawing to 200,200 will actually draw to 100,100)
 \p4
(Enables drawing, and resolution is 8x larger (2^(4-1)). So drawing to 400,400 will actually draw to 50,50)

===\pbo<y> - Baseline offset===
Defines baseline offset for drawing. This is basically an Y offset to all coordinates.
e.g.:
 \pbo-50
(Draws everything 50 pixels above specified)
 \pbo100
(Draws everything 100 pixels below specified)

==Drawing commands==
These commands should appear either in a \clip tag (vectorial overload) or between \p# and \p0, outside override blocks.
For example (taken straight from the ASS specs):
*Square:
 {\p1}m 0 0 l 100 0 100 100 0 100{\p0}
*Rounded square:
 {\p1}m 0 0 s 100 0 100 100 0 100 c{\p0}
:(c equals to "p 0 0 100 0 100 100" in this case)
*Circle (almost):
 {\p1}m 50 0 b 100 0 100 100 50 100 b 0 100 0 0 50 0{\p0}
:(note that the 2nd 'b' is optional here)

Drawing commands use the primary color for fill and outline color for borders. They also display shadow. The idea of drawing vectors is that there is an invisible "cursor" (think of it as the mouse pointer in a drawing program, or as a pen moving through the image) on the video frame, and you tell it to move to other positions. As it moves, it draws on the area behind it, and when you close the line formed, it fills it with the primary color.

===m <x> <y> - Move===
Moves the cursor to x,y. If you have an unclosed shape, it will automatically be closed, as the program assumes that you are now drawing a new, independent shape. All drawing routines must start with this command.

===n <x> <y> - Move (no closing)===
Moves the cursor to x,y, without closing the current shape.

===l <x> <y> - Line===
Draws a line from the current cursor position to x,y, and moves the cursor there afterwards.

===b <x1> <y1> <x2> <y2> <x3> <y3> - Cubic Bézier curve===
Draws a cubic (3rd degree) Bézier curve to point 3, using 1 and 2 as the control points. Check the [http://en.wikipedia.org/wiki/B%C3%A9zier_curve article on Wikipedia] for more information about Bézier curves. In this picture taken from that article, P0 is the cursor position, P1 is x1,y1, P2 is x2,y2 and P3 is x3,y3:<br>
[[Image:Bezier.png]]<br>
Note that the curve begins at P0, heads towards P1, then arrives at P3 coming from P2's direction.

===s <x1> <y1> <x2> <y2> <x3> <y3> .. <xN> <yN> - Cubic b-spline===
Draws a cubic (3rd degree) uniform b-spline to point N. This must contain at least 3 coordinates (and is, in that case, the same as b). This basically lets you chain several cubic Bézier curves together. Check this other article on Wikipedia for more information.

===p <x> <y> - Extend b-spline===
Extends the b-spline to x,y. This is essentially the same as adding another pair of coordinates at the end of s.

===c - Close b-spline===
Closes the b-spline.